class Solution:
    
    def nextState(self,grid):
        if not grid:
            return []


        neighbors = [[0,-1],[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1]]
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                alive = 0
                for r,c in neighbors:
                    if 0 <= row+r <len(grid) and 0<=c+col<len(grid[0]) and abs(grid[r][c]) == 1:
                        alive += 1
    
                if grid[row][col]:
                    if 2 <= alive <= 3:
                        grid[row][col] = 1
                    else:
                        grid[row][col] = -1
                else:
                    if alive == 3:
                        grid[row][col] = 2
                    else:
                        grid[row][col] = 0

        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if grid[row][col] > 0:
                    grid[row][col] = 1
                else:
                    grid[row][col] = 0


    
    
    
    
    def updateBoard(board):
        live = [(i,j) for i,row in enumerate(board) for j,val in enumerate(row) if val]

    def findlives(live):
        count = defauldict(int)
        neighbors = [[0,-1],[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1]]
        
        for row,col in live:
            for r,c in neighbors:
                if (r+row,c+col) in live:
                    count((row,col)) += 1

        result = {}

        for i,j in count:
            

        
    
    with open("input.txt",r) as f:
        curr = f.readline()
        pointer = f.readline()
        prev,next = [0]*len(curr),[0]*len(curr)
        result = []
        while pointer:
            if not next:
                next = pointer
                pointer = f.readline()
            
            
            tmp_board = [prev,curr,next]
            nextStateBoard = updateBoard(tmp_board)
            result.append(nextStateBoard[:])

            prev = curr
            curr = next
            next = 





    


